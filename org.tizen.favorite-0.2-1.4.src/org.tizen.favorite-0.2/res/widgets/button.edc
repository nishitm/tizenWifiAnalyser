/*
 * Copyright (c) 2015 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#define STATE_NORMAL 0
#define STATE_SELECTED 1
#define STATE_DISABLE 2
#define STATE_TOGGLE 3

group {
	name, "elm/button/base/style.menu.button";
	data.item, "focus_highlight" "on";
	script {
		public cur_state;
	}
	parts {
		part {
			name, "part.bg";
			type, RECT;
			scale, 1;
			description {
				state, "default" 0.0;
				min, 0 82;
			}
			description {
				state, "selected" 0.0;
				inherit, "default" 0.0;
			}
			description {
				state, "focused" 0.0;
				inherit, "default" 0.0;
				color, 0 119 246 255;
			}
		}

		part {
			name, "part.bg.left";
			type, RECT;
			scale, 1;
			description {
				state, "default" 0.0;
				min, 40 82;
				rel1.to, "part.bg";
				rel2 {
					relative, 0.0 0.0;
					to, "part.bg";
				}
				align, 1.0 0.0;
				fixed, 1 1;
			}
			description {
				state, "selected" 0.0;
				inherit, "default" 0.0;
			}
			description {
				state, "focused" 0.0;
				inherit, "default" 0.0;
				color, 0 119 246 255;
			}
		}

		part {
			name, "part.bg.right";
			type, RECT;
			scale, 1;
			description {
				state, "default" 0.0;
				min, 40 82;
				rel1 {
					relative, 1.0 0.0;
					to, "part.bg";
				}
				rel2 {
					relative, 1.0 0.0;
					to, "part.bg";
				}
				align, 0.0 0.0;
				fixed, 1 1;
			}
			description {
				state, "selected" 0.0;
				inherit, "default" 0.0;
			}
			description {
				state, "focused" 0.0;
				inherit, "default" 0.0;
				color, 0 119 246 255;
			}
		}

		part {
			name, "elm.text";
			type, TEXT;
			scale, 1;
			description {
				state, "default" 0.0;
				color, 104 104 104 255;
				min, 0 82;
				align, 0.5 0.0;
				fixed, 0 1;
				text {
					min, 1 1;
					font, FONT_TIZENSANS_REGULAR;
					size, 32;
					align, 0.5 0.5;
					ellipsis, -1;
				}
			}
			description {
				state, "selected" 0.0;
				inherit, "default" 0.0;
				color, 64 136 211 255;
			}
			description {
				state, "focused" 0.0;
				inherit, "default" 0.0;
				color, 255 255 255 255;
			}
		}

		part {
			name, "part.bottom.line";
			type, RECT;
			scale, 1;
			description {
				state, "default" 0.0;
				color, 64 136 211 255;
				min, 0 3;
				rel1 {
					to, "part.bg";
					relative, 0.0 1.0;
				}
				rel2.to, "part.bg";
				align, 0.5 1.0;
				fixed, 0 1;
				visible, 0;
			}
			description {
				state, "selected" 0.0;
				inherit, "default" 0.0;
				visible, 1;
			}
			description {
				state, "focused" 0.0;
				inherit, "default" 0.0;
			}
		}
	}

	programs{
		program {
			name, "load";
			signal, "load";
			source, "";
			script {
				set_int(cur_state, STATE_NORMAL);
			}
		}

		program {
			name, SIG_FOCUSED;
			signal, "elm,action,focus";
			source, "elm";
			script {
				set_int(cur_state, STATE_NORMAL);
				set_state(PART:"part.bottom.line", "focused", 0.0);
				run_program(PROGRAM:"focused,anim");
			}
		}

		program {
			name, "focused,anim";
			action, STATE_SET "focused" 0.0;
			target, "part.bg";
			target, "part.bg.left";
			target, "part.bg.right";
			target, "elm.text";
			transition, TRANSITION_FOCUS;
		}

		program {
			name, SIG_UNFOCUSED;
			signal, "elm,action,unfocus";
			source, "elm";
			script {
				new state;
				state = get_int(cur_state);
				set_int(cur_state, STATE_NORMAL);
				if (state == STATE_SELECTED) {
					set_state(PART:"part.bottom.line", "selected", 0.0);
					run_program(PROGRAM:"unfocused,sel,anim");
				} else {
					set_state(PART:"part.bottom.line", "default", 0.0);
					run_program(PROGRAM:"unfocused,foc,anim");
				}
			}
		}

		program {
			name, "unfocused,sel,anim";
			action, STATE_SET "selected" 0.0;
			target, "part.bg";
			target, "part.bg.left";
			target, "part.bg.right";
			target, "elm.text";
			transition, TRANSITION_FOCUS;
		}

		program {
			name, "unfocused,foc,anim";
			action, STATE_SET "default" 0.0;
			target, "part.bg";
			target, "part.bg.left";
			target, "part.bg.right";
			target, "elm.text";
			transition, TRANSITION_FOCUS;
		}

		program {
			name, SIG_SELECTED;
			signal, SIG_SELECTED;
			source, SRC_MENU_BTN;
			script {
				set_int(cur_state, STATE_SELECTED);
				set_state(PART:"part.bottom.line", "selected", 0.0);
				run_program(PROGRAM:"selected,anim");
			}
		}

		program {
			name, "selected,anim";
			action, STATE_SET "selected" 0.0;
			target, "part.bg";
			target, "part.bg.left";
			target, "part.bg.right";
			target, "elm.text";
			transition, TRANSITION_FOCUS;
		}

		program {
			name, SIG_UNSELECTED;
			signal, SIG_UNSELECTED;
			source, SRC_MENU_BTN;
			script {
				set_int(cur_state, STATE_NORMAL);
				set_state(PART:"part.bottom.line", "default", 0.0);
				run_program(PROGRAM:"unselected,anim");
			}
		}

		program {
			name, "unselected,anim";
			action, STATE_SET "default" 0.0;
			target, "part.bg";
			target, "part.bg.left";
			target, "part.bg.right";
			target, "elm.text";
			transition, TRANSITION_FOCUS;
		}
	}
}

group {
	name, "elm/button/base/style.livetv.button";
	data.item, "focus_highlight" "on";
	parts {
		part {
			name, "part.bg";
			type, RECT;
			scale, 1;
			description {
				state, "default" 0.0;
				min, 0 64;
			}
			description {
				state, "focused" 0.0;
				inherit, "default" 0.0;
				color, 0 119 246 255;
			}
			description {
				state, "disable" 0.0;
				inherit, "default" 0.0;
			}
		}

		part {
			name, "padding.text.left";
			type, SPACER;
			scale, 1;
			description {
				state, "default" 0.0;
				min, 20 0;
				rel1.to, "part.bg";
				rel2 {
					to, "part.bg";
					relative, 0.0 1.0;
				}
				align, 0.0 0.5;
				fixed, 1 0;
			}
		}

		part {
			name, "padding.text.right";
			type, SPACER;
			scale, 1;
			description {
				state, "default" 0.0;
				min, 20 0;
				rel1 {
					to, "part.bg";
					relative, 1.0 0.0;
				}
				rel2.to, "part.bg";
				align, 1.0 0.5;
				fixed, 1 0;
			}
		}

		part {
			name, "elm.text";
			type, TEXT;
			scale, 1;
			description {
				state, "default" 0.0;
				color, 87 87 87 255;
				rel1 {
					to, "padding.text.left";
					relative, 1.0 0.0;
				}
				rel2 {
					to, "padding.text.right";
					relative, 0.0 1.0;
				}
				text {
					font, FONT_TIZENSANS_LIGHT;
					size, 28;
					align, 0.5 0.5;
				}
			}
			description {
				state, "focused" 0.0;
				inherit, "default" 0.0;
				color, 255 255 255 255;
			}
			description {
				state, "disable" 0.0;
				inherit, "default" 0.0;
				color, 87 87 87 127;
			}
		}

		part {
			name, "part.inside.line.up";
			type, RECT;
			scale, 1;
			description {
				state, "default" 0.0;
				color, 194 194 194 255;
				rel1.to, "part.bg";
				rel2 {
					to, "part.bg";
					relative, 1.0 0.0;
				}
				min, 0 1;
				align, 0.5 0.0;
				fixed, 0 1;
			}
			description {
				state, "disable" 0.0;
				inherit, "default" 0.0;
				color, 194 194 194 127;
			}
		}

		part {
			name, "part.inside.line.left";
			type, RECT;
			scale, 1;
			description {
				state, "default" 0.0;
				color, 194 194 194 255;
				rel1 {
					to, "part.inside.line.up";
					relative, 0.0 1.0;
				}
				rel2 {
					to, "part.bg";
					relative, 0.0 1.0;
				}
				min, 1 0;
				align, 0.0 0.5;
				fixed, 1 0;
			}
			description {
				state, "disable" 0.0;
				inherit, "default" 0.0;
				color, 194 194 194 127;
			}
		}

		part {
			name, "part.inside.line.down";
			type, RECT;
			scale, 1;
			description {
				state, "default" 0.0;
				color, 194 194 194 255;
				rel1 {
					to, "part.inside.line.left";
					relative, 1.0 1.0;
				}
				rel2.to, "part.bg";
				min, 0 1;
				align, 0.5 1.0;
				fixed, 0 1;
			}
			description {
				state, "disable" 0.0;
				inherit, "default" 0.0;
				color, 194 194 194 127;
			}
		}

		part {
			name, "part.inside.line.right";
			type, RECT;
			scale, 1;
			description {
				state, "default" 0.0;
				color, 194 194 194 255;
				rel1 {
					to, "part.inside.line.up";
					relative, 1.0 1.0;
				}
				rel2 {
					to, "part.inside.line.down";
					relative, 1.0 0.0;
				}
				min, 1 0;
				align, 1.0 0.5;
				fixed, 1 0;
			}
			description {
				state, "disable" 0.0;
				inherit, "default" 0.0;
				color, 194 194 194 127;
			}
		}

		part {
			name, "event";
			type, RECT;
			description {
				state, "default" 0.0;
				color, 0 0 0 0;
			}
			description {
				state, "disable" 0.0;
				inherit, "default" 0.0;
				visible, 0;
			}
		}
	}

	programs {
		program {
			name, SIG_FOCUSED;
			signal, "elm,action,focus";
			source, "elm";
			action, STATE_SET "focused" 0.0;
			target, "part.bg";
			target, "elm.text";
			transition, TRANSITION_FOCUS;
		}

		program {
			name, SIG_UNFOCUSED;
			signal, "elm,action,unfocus";
			source, "elm";
			action, STATE_SET "default" 0.0;
			target, "part.bg";
			target, "elm.text";
			transition, TRANSITION_FOCUS;
		}

		program {
			name, SIG_DISABLE;
			signal, SIG_DISABLE;
			source, "elm";
			script {
				set_state(PART:"elm.text", "disable", 0.0);
				set_state(PART:"part.inside.line.up", "disable", 0.0);
				set_state(PART:"part.inside.line.down", "disable", 0.0);
				set_state(PART:"part.inside.line.left", "disable", 0.0);
				set_state(PART:"part.inside.line.right", "disable", 0.0);
				set_state(PART:"event", "disable", 0.0);
			}
		}

		program {
			name, "mouse_unclick_after";
			signal, "mouse,clicked,1";
			source, "event";
			action, SIGNAL_EMIT "elm,action,click" "";
		}
	}
}

group {
	name, "elm/button/base/style.action.menu.favorite.button";
	data.item, "focus_highlight" "on";
	script {
		public cur_state;
	}

	images {
		image, ACTION_FAV_NOR_PNG COMP;
		image, ACTION_FAV_FOC_PNG COMP;
		image, ACTION_FAV_SEL_PNG COMP;
		image, ACTION_FAV_DIS_PNG COMP;
	}

	parts {
		part {
			name, "part.bg";
			type, RECT;
			scale, 1;
			description {
				state, "default" 0.0;
				min, 125 124;
			}
			description {
				state, "focused" 0.0;
				inherit, "default" 0.0;
				color, 0 119 246 255;
			}
			description {
				state, "selected" 0.0;
				inherit, "default" 0.0;
			}
			description {
				state, "disable" 0.0;
				inherit, "default" 0.0;
			}
		}

		part {
			name, "part.divider.right";
			type, RECT;
			scale, 1;
			description {
				state, "default" 0.0;
				color, 224 224 224 255;
				rel1 {
					to, "part.bg";
					relative, 1.0 0.0;
				}
				rel2.to, "part.bg";
				min, 1 0;
				align, 1.0 0.5;
				fixed, 1 0;
			}
		}

		part {
			name, "padding.icon1";
			type, SPACER;
			scale, 1;
			description {
				state, "default" 0.0;
				rel1.to, "part.bg";
				rel2 {
					to, "part.bg";
					relative, 1.0 0.0;
				}
				min, 0 14;
				align, 0.5 0.0;
				fixed, 0 1;
			}
		}

		part {
			name, "padding.icon2";
			type, SPACER;
			scale, 1;
			description {
				state, "default" 0.0;
				rel1 {
					to, "part.bg";
					relative, 0.0 1.0;
				}
				rel2.to, "part.bg";
				min, 0 50;
				align, 0.5 1.0;
				fixed, 0 1;
			}
		}

		part {
			name, "part.icon.bg";
			type, SPACER;
			scale, 1;
			description {
				state, "default" 0.0;
				rel1 {
					to, "padding.icon1";
					relative, 0.0 1.0;
				}
				rel2 {
					to, "padding.icon2";
					relative, 1.0 0.0;
				}
				align, 0.5 0.5;
			}
		}

		part {
			name, "part.icon";
			type, IMAGE;
			scale, 1;
			description {
				state, "default" 0.0;
				image.normal, ACTION_FAV_NOR_PNG;
				rel1 {
					to, "part.icon.bg";
					relative, 0.5 0.5;
				}
				rel2 {
					to, "part.icon.bg";
					relative, 0.5 0.5;
				}
				align, 0.5 0.5;
				fixed, 1 1;
				min, 60 60;
			}
			description {
				state, "focused" 0.0;
				inherit, "default" 0.0;
				image.normal, ACTION_FAV_FOC_PNG;
			}
			description {
				state, "selected" 0.0;
				inherit, "default" 0.0;
				image.normal, ACTION_FAV_SEL_PNG;
			}
			description {
				state, "disable" 0.0;
				inherit, "default" 0.0;
				image.normal, ACTION_FAV_DIS_PNG;
			}
		}

		part {
			name, "padding.text";
			type, SPACER;
			scale, 1;
			description {
				state, "default" 0.0;
				rel1 {
					to, "part.bg";
					relative, 0.0 1.0;
				}
				rel2.to, "part.bg";
				min, 0 24;
				align, 0.5 1.0;
				fixed, 0 1;
			}
		}

		part {
			name, "elm.text";
			type, TEXT;
			scale, 1;
			description {
				state, "default" 0.0;
				color, 104 104 104 255;
				rel1.to, "padding.text";
				rel2 {
					to, "padding.text";
					relative, 1.0 0.0;
				}
				min, 0 20;
				align, 0.5 1.0;
				fixed, 0 1;
				text {
					font, FONT_TIZENSANS_LIGHT;
					size, 20;
					align, 0.5 0.5;
				}
			}
			description {
				state, "focused" 0.0;
				inherit, "default" 0.0;
				color, 255 255 255 255;
			}
			description {
				state, "selected" 0.0;
				inherit, "default" 0.0;
				color, 64 136 211 255;
			}
			description {
				state, "disable" 0.0;
				inherit, "default" 0.0;
				color, 104 104 104 127;
			}
		}

		part {
			name, "event";
			type, RECT;
			description {
				state, "default" 0.0;
				color, 0 0 0 0;
			}
			description {
				state, "disable" 0.0;
				inherit, "default" 0.0;
				visible, 0;
			}
		}
	}

	programs{
		program {
			name, "load";
			signal, "load";
			source, "";
			script {
				set_int(cur_state, STATE_NORMAL);
			}
		}

		program {
			name, SIG_FOCUSED;
			signal, "elm,action,focus";
			source, "elm";
			script {
				new state;
				state = get_int(cur_state);
				if (state == STATE_NORMAL) {
					set_state(PART:"part.bg", "focused", 0.0);
					set_state(PART:"part.icon", "focused", 0.0);
					set_state(PART:"elm.text", "focused", 0.0);
				}
			}
		}

		program {
			name, SIG_UNFOCUSED;
			signal, "elm,action,unfocus";
			source, "elm";
			script {
				new state;
				state = get_int(cur_state);
				if (state == STATE_NORMAL) {
					set_state(PART:"part.bg", "default", 0.0);
					set_state(PART:"part.icon", "default", 0.0);
					set_state(PART:"elm.text", "default", 0.0);
				}
			}
		}

		program {
			name, SIG_DISABLE;
			signal, SIG_DISABLE;
			source, "elm";
			script {
				set_int(cur_state, STATE_DISABLE);
				set_state(PART:"part.bg", "disable", 0.0);
				set_state(PART:"elm.text", "disable", 0.0);
				set_state(PART:"part.icon", "disable", 0.0);
				set_state(PART:"event", "disable", 0.0);
			}
		}

		program {
			name, "mouse_unclick_after";
			signal, "mouse,clicked,1";
			source, "event";
			action, SIGNAL_EMIT "elm,action,click" "";
		}
	}
}

group {
	name, "elm/button/base/style.action.menu.lock.button";
	inherit, "elm/button/base/style.action.menu.favorite.button";
	data.item, "focus_highlight" "on";
	images {
		image, ACTION_UNLOCK_NOR_PNG COMP;
		image, ACTION_UNLOCK_FOC_PNG COMP;
		image, ACTION_LOCK_NOR_PNG COMP;
		image, ACTION_LOCK_FOC_PNG COMP;
		image, ACTION_LOCK_SEL_PNG COMP;
		image, ACTION_LOCK_DIS_PNG COMP;
	}
	parts {
		part {
			name, "part.icon";
			type, IMAGE;
			scale, 1;
			description {
				state, "default" 0.0;
				rel1 {
					to, "part.icon.bg";
					relative, 0.5 0.5;
				}
				rel2 {
					to, "part.icon.bg";
					relative, 0.5 0.5;
				}
				align, 0.5 0.5;
				fixed, 1 1;
				min, 60 60;
				image.normal, ACTION_UNLOCK_NOR_PNG;
			}
			description {
				state, "default.toggle" 0.0;
				inherit, "default" 0.0;
				image.normal, ACTION_LOCK_NOR_PNG;
			}
			description {
				state, "focused" 0.0;
				inherit, "default" 0.0;
				image.normal, ACTION_UNLOCK_FOC_PNG;
			}
			description {
				state, "focused.toggle" 0.0;
				inherit, "default" 0.0;
				image.normal, ACTION_LOCK_FOC_PNG;
			}
			description {
				state, "selected" 0.0;
				inherit, "default" 0.0;
				image.normal, ACTION_LOCK_SEL_PNG;
			}
			description {
				state, "disable" 0.0;
				inherit, "default" 0.0;
				image.normal, ACTION_LOCK_DIS_PNG;
			}
		}
	}

	programs{
		program {
			name, "load";
			signal, "load";
			source, "";
			script {
				set_int(cur_state, STATE_NORMAL);
			}
		}

		program {
			name, SIG_TOGGLE;
			signal, SIG_TOGGLE;
			source, SRC_ACTION_BTN;
			script {
				new state;
				state = get_int(cur_state);
				if (state == STATE_NORMAL) {
					set_int(cur_state, STATE_TOGGLE);
					set_state(PART:"part.icon", "default.toggle", 0.0);
				}
			}
		}

		program {
			name, SIG_FOCUSED;
			signal, "elm,action,focus";
			source, "elm";
			script {
				new state;
				state = get_int(cur_state);
				if (state == STATE_NORMAL) {
					set_state(PART:"part.icon", "focused", 0.0);
					run_program(PROGRAM:"focused,anim");
				} else if (state == STATE_TOGGLE) {
					set_state(PART:"part.icon", "focused.toggle", 0.0);
					run_program(PROGRAM:"focused,anim");
				}
			}
		}

		program {
			name, SIG_UNFOCUSED;
			signal, "elm,action,unfocus";
			source, "elm";
			script {
				new state;
				state = get_int(cur_state);
				if (state == STATE_NORMAL) {
					set_state(PART:"part.icon", "default", 0.0);
					run_program(PROGRAM:"unfocused,anim");
				} else if (state != STATE_DISABLE) {
					set_state(PART:"part.icon", "default.toggle", 0.0);
					run_program(PROGRAM:"unfocused,anim");
				}
			}
		}

		program {
			name, "focused,anim";
			action, STATE_SET "focused" 0.0;
			target, "part.bg";
			target, "elm.text";
			transition, TRANSITION_FOCUS;
		}

		program {
			name, "unfocused,anim";
			action, STATE_SET "default" 0.0;
			target, "part.bg";
			target, "elm.text";
			transition, TRANSITION_FOCUS;
		}

		program {
			name, SIG_SELECTED;
			signal, SIG_SELECTED;
			source, SRC_ACTION_BTN;
			script {
				new state;
				state = get_int(cur_state);
				if (state == STATE_NORMAL) {
					set_int(cur_state, STATE_TOGGLE);
					set_state(PART:"part.icon", "focused.toggle", 0.0);
				} else if (state == STATE_TOGGLE) {
					set_int(cur_state, STATE_NORMAL);
					set_state(PART:"part.icon", "focused", 0.0);
				}
			}
		}

		program {
			name, SIG_DISABLE;
			signal, SIG_DISABLE;
			source, "elm";
			script {
				set_int(cur_state, STATE_DISABLE);
				set_state(PART:"part.bg", "disable", 0.0);
				set_state(PART:"elm.text", "disable", 0.0);
				set_state(PART:"part.icon", "disable", 0.0);
				set_state(PART:"event", "disable", 0.0);
			}
		}

		program {
			name, "mouse_unclick_after";
			signal, "mouse,clicked,1";
			source, "event";
			action, SIGNAL_EMIT "elm,action,click" "";
		}
	}
}
